import { createEffect } from 'effector-next'
import api from '../axiosClient'
import { toast } from 'react-toastify'
import { ICar } from '@/types/boilerparts'
import { mapCarToBoilerPart, createBoilerPartsFromCars } from '@/utils/carMapper'

export const getBestsellersOrNewPartsFx = createEffect(async (url: string) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  const searchParams = {
    limit: 100
  }
  
  const { data } = await api.post('/cars/search', searchParams)

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ ICar), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
  if (data.cars && Array.isArray(data.cars)) {
    return createBoilerPartsFromCars(data.cars as ICar[])
  }

  return { count: 0, rows: [] }
})

export const getSoldCarsFx = createEffect(async (url: string) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
    const searchParams = {
      limit: 100
    }
    
    const { data } = await api.post('/cars/search', searchParams)

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ ICar), —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
    if (data.cars && Array.isArray(data.cars)) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (sale: true –∏–ª–∏ isSold: true)
      const soldCars = data.cars.filter((car: ICar) => car.sale === true || car.isSold === true)
      console.log('üöó Found sold cars:', soldCars.length)
      return soldCars.map(mapCarToBoilerPart)
    }

    return []
  } catch (error) {
    console.error('Error in getSoldCarsFx:', error)
    toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π')
    return []
  }
})

export const getBoilerPartsFx = createEffect(async (url: string) => {
  console.log('üîç getBoilerPartsFx called with URL:', url)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  const searchParams = {
    limit: 100
  }
  
  const { data } = await api.post('/cars/search', searchParams)
  
  console.log('üì° API Response data:', data)
  console.log('üìä Cars length:', data.cars ? data.cars.length : 'No cars field')
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ ICar), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
  if (data.cars && Array.isArray(data.cars)) {
    const mappedData = createBoilerPartsFromCars(data.cars as ICar[])
    console.log('üîÑ Mapped data:', mappedData)
    console.log('üìà Mapped count:', mappedData.count, 'rows:', mappedData.rows.length)
    return mappedData
  }
  
  console.log('‚ö†Ô∏è No cars field found, returning empty data')
  return { count: 0, rows: [] }
})

export const getBoilerPartFx = createEffect(async (url: string) => {
  const { data } = await api.get(url)
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (ICar), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
  if (data && typeof data === 'object' && 'brand' in data) {
    return mapCarToBoilerPart(data as ICar)
  }
  
  return data
})

export const searchPartsFx = createEffect(
  async ({ url, search }: { url: string; search: string }) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π API –ø–æ–∏—Å–∫–∞ —Å LIKE –∑–∞–ø—Ä–æ—Å–∞–º–∏
      const searchParams = {
        brand: search,
        model: search,
        limit: 50
      }
      
      const { data } = await api.post('/cars/search', searchParams)

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ ICar), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
      if (data.cars && Array.isArray(data.cars)) {
        return data.cars.map(mapCarToBoilerPart)
      }
      
      return []
    } catch (error) {
      console.error('Search error:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ')
      return []
    }
  }
)

export const getPartByNameFx = createEffect(
  async ({ url, name }: { url: string; name: string }) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π API –ø–æ–∏—Å–∫–∞
      const searchParams = {
        brand: name,
        model: name,
        limit: 1
      }
      
      const { data } = await api.post('/cars/search', searchParams)

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ ICar), –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (data.cars && Array.isArray(data.cars) && data.cars.length > 0) {
        return mapCarToBoilerPart(data.cars[0] as ICar)
      }
      
      return null
    } catch (error) {
      console.error('Get part by name error:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞')
      return null
    }
  }
)

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API
export const getFilteredCarsFx = createEffect(
  async (searchParams: any) => {
    try {
      const { data } = await api.post('/cars/search', searchParams)

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–º–∞—Å—Å–∏–≤ ICar), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
      if (data.cars && Array.isArray(data.cars)) {
        return createBoilerPartsFromCars(data.cars as ICar[])
      }

      return { count: 0, rows: [] }
    } catch (error) {
      console.error('Error in getFilteredCarsFx:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π')
      return { count: 0, rows: [] }
    }
  }
)
